import cv2 
import numpy as np 
from google.colab.patches import cv2_imshow 

# Load the leaf image 
image = cv2.imread('/content/drive/MyDrive/DSC_0372.JPG') 
# Convert the image to HSV color space 
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) 
# Defining the lower and upper color thresholds for disease-affected areas 
lower_color = np.array([20, 50, 50])  # Adjusting these values according 
to  specific disease characteristics 
upper_color = np.array([40, 255, 255])  # Adjusting these values according to 
specific disease characteristics 
# Threshold the image to get disease-affected areas 
mask = cv2.inRange(hsv, lower_color, upper_color) 
# Apply a morphological operation to improve the mask 
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (7, 7)) 
mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel) 
 
#contour_image = np.zeros_like(image) 
# Find contours in the mask 
contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) 
 
# Draw contours on the original image 
cv2.drawContours(image, contours, -1, (255, 0, 0), 6)  # Draw blue contours around 
disease-affected areas 
 
# Calculate the total leaf area 
total_area = image.shape[0] * image.shape[1] 
#print(total_area) 
# Initialize a variable to store the total affected area 
affected_area = 0 
 
# Iterate over the contours 
for contour in contours: 
    # Calculate the area of each contour 
    area = cv2.contourArea(contour) 
 
    x, y, w, h = cv2.boundingRect(contour) 
    length = h 
    width = w 
 
    # Assuming you have the pixel resolution or scale factor in mm/pixel 
    pixel_resolution_mm = 0.1  # Pixel resolution in mm/pixel 
 
    # Calculate the length and width in millimeters 
    length_mm = length * pixel_resolution_mm 
    width_mm = width * pixel_resolution_mm 
 
    # Update the total affected area 
    affected_area += area 
 
   # Calculate the affected area in mm^2 
    affected_area_mm2 = length_mm * width_mm 
 
# Print the length and width of the affected area 
#print("Length:  {} mm".format(length_mm)) 
#print("Width: {} mm" .format(width_mm)) 
 
# Print the affected area 
print("Total affected Area in mm^2 : {} mm^2".format(affected_area_mm2)) 
 
# Print the total affected area 
print("Total affected area in pixels :", affected_area, "pixels") 


 Calculate the affected area percentage 
affected_area_percentage = (affected_area / total_area) * 100 
 
# Print the affected area percentage 
print("Total affected area in percentage:", affected_area_percentage, "%") 
 
Disease_Area  = (affected_area_percentage / 100) * total_area 
 
# Display the image with disease-affected areas highlighted 
cv2_imshow(image) 
cv2.waitKey(0) 
cv2.destroyAllWindows() 

import cv2 
import numpy as np 
from google.colab.patches import cv2_imshow 
 
# Load the leaf image 
image = cv2.imread('/content/drive/MyDrive/DSC_0113.jpg') 
 
# Convert the image to HSV color space 
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) 
 
 
# Defining the lower and upper color thresholds for disease-affected areas 
lower_color = np.array([0, 50, 50])  # Adjusting these values according to 
specific disease characteristics 
upper_color = np.array([20, 255, 255])  # Adjusting these values according 
to  specific disease characteristics 
 
# Threshold the image to get disease-affected areas 
mask = cv2.inRange(hsv, lower_color, upper_color) 
 
# Apply a morphological operation to improve the mask 
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (7, 7)) 
mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel) 
 
#contour_image = np.zeros_like(image) 
 
# Find contours in the mask 
contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) 
 
# Draw contours on the original image 
cv2.drawContours(image, contours, -1, (255, 0, 0), 6)  # Draw blue contours around 
disease-affected areas 

# Calculate the total leaf area 
total_area = image.shape[0] * image.shape[1] 
 
# Initialize a variable to store the total affected area 
affected_area = 0 
 
# Iterate over the contours 
for contour in contours: 
    # Calculate the area of each contour 
    area = cv2.contourArea(contour) 
    x, y, w, h = cv2.boundingRect(contour) 
    length = h 
    width = w 
 
    # Assuming you have the pixel resolution or scale factor in mm/pixel 
    pixel_resolution_mm = 0.1  # Pixel resolution in mm/pixel 
 
    # Calculate the length and width in millimeters 
    length_mm = length * pixel_resolution_mm 
    width_mm = width * pixel_resolution_mm 
 
    # Update the total affected area 
    affected_area += area 
 
    # Calculate the affected area in mm^2 
    affected_area_mm2 = length_mm * width_mm 
 
# Print the affected area 
print("Total affected Area in mm^2 : {} mm^2".format(affected_area_mm2)) 
 
# Print the total affected area 
print("Total affected area in pixels :", affected_area, "pixels") 
 
# Calculate the affected area percentage 
affected_area_percentage = (affected_area / total_area) * 100 
 
# Print the affected area percentage 
print("Total affected area in percentage:", affected_area_percentage, "%") 
 
# Display the image with disease-affected areas highlighted 
cv2_imshow(image) 
cv2.waitKey(0) 
cv2.destroyAllWindows()

import cv2 
import numpy as np 
from google.colab.patches import cv2_imshow 
 
# Load the leaf image 
image = cv2.imread('/content/drive/MyDrive/DSC_0504.jpg') 
 
# Convert the image to HSV color space 
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) 
 
 
# Defining the lower and upper color thresholds for disease-affected areas 
lower_color = np.array([0, 255, 50])  # Adjust these values according to your 
specific disease characteristics 
upper_color = np.array([180, 255, 255])  # Adjust these values according to your 
specific disease characteristics 
 
# Threshold the image to get disease-affected areas 
mask = cv2.inRange(hsv, lower_color, upper_color) 
 
 
 
# Apply a morphological operation to improve the mask 
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5)) 
mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel) 
 
#contour_image = np.zeros_like(image) 
 
# Find contours in the mask 
contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) 
 
# Draw contours on the original image 
cv2.drawContours(image, contours, -1, (255, 0, 0), 6)  # Draw blue contours around 
disease-affected areas 
 
# Calculate the total leaf area 
total_area = image.shape[0] * image.shape[1] 
 
# Initialize a variable to store the total affected area 
affected_area = 0 
 
# Iterate over the contours 
for contour in contours: 
    # Calculate the area of each contour

 area = cv2.contourArea(contour) 
    x, y, w, h = cv2.boundingRect(contour) 
    length = h 
    width = w 
 
    # Assuming you have the pixel resolution or scale factor in mm/pixel 
    pixel_resolution_mm = 0.1  # Pixel resolution in mm/pixel 
 
    # Calculate the length and width in millimeters 
    length_mm = length * pixel_resolution_mm 
    width_mm = width * pixel_resolution_mm 
 
    # Update the total affected area 
    affected_area += area 
 
    # Calculate the affected area in mm^2 
    affected_area_mm2 = length_mm * width_mm 
 
# Print the affected area 
print("Total affected Area in mm^2 : {} mm^2".format(affected_area_mm2)) 
 
# Print the total affected area 
print("Total affected area in pixels:", affected_area, "pixels") 
 
# Calculate the affected area percentage 
affected_area_percentage = (affected_area / total_area) * 100 
 
# Print the affected area percentage 
print("Total affected area in percentage:", affected_area_percentage, "%") 
 
# Display the image with disease-affected areas highlighted 
cv2_imshow(image) 
cv2.waitKey(0) 
cv2.destroyAllWindows()

import cv2 
import numpy as np 
from google.colab.patches import cv2_imshow 
 
# Load the leaf image 
image = cv2.imread('/content/drive/MyDrive/IMG_3233.jpg') 
 
# Convert the image to HSV color space 
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) 

# Defining the lower and upper color thresholds for disease-affected areas 
lower_color = np.array([0, 50, 50])  # Adjust these values according to your 
specific disease characteristics 
upper_color = np.array([10, 255, 255])  # Adjust these values according to your 
specific disease characteristics 
 
# Threshold the image to get disease-affected areas 
mask = cv2.inRange(hsv, lower_color, upper_color) 
 
 
 
# Apply a morphological operation to improve the mask 
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (7, 7)) 
mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel) 
 
#contour_image = np.zeros_like(image) 
 
# Find contours in the mask 
contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) 
 
# Draw contours on the original image 
cv2.drawContours(image, contours, -1, (255, 0, 0), 6)  # Draw blue contours around 
disease-affected areas 
 
# Calculate the total leaf area 
total_area = image.shape[0] * image.shape[1] 
 
# Initialize a variable to store the total affected area 
affected_area = 0 
 
# Iterate over the contours 
for contour in contours: 
    # Calculate the area of each contour 
    area = cv2.contourArea(contour) 
 
    # Update the total affected area 
    affected_area += area 
 
total_affected_area = 0 
print("Total affected area in mm^2 :", total_affected_area, "mmÂ²") 
 
# Print the total affected area 
print("Total affected area:", affected_area, "pixels") 
 
# Calculate the affected area percentage 
affected_area_percentage = (affected_area / total_area) * 100 
 
# Print the affected area percentage 

print("Disease-affected area percentage:", affected_area_percentage, "%") 
 
# Display the image with disease-affected areas highlighted 
cv2_imshow(image) 
cv2.waitKey(0) 
cv2.destroyAllWindows() 

import cv2 
import numpy as np 
from google.colab.patches import cv2_imshow 
 
# Load the leaf image 
image = cv2.imread('/content/drive/MyDrive/extracted_dataset/Narrow Brown 
Spot/narrow_brown-120-_jpg.rf.e861f0a2050113eb7306e99631d08335.jpg') 
 
# Convert the image to HSV color space 
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) 
 
# Defining the lower and upper color thresholds for disease-affected areas 
lower_color = np.array([20, 50, 50])  # Adjusting these values according 
to  specific disease characteristics 
upper_color = np.array([40, 255, 255])  # Adjusting these values according to 
specific disease characteristics 
 
# Threshold the image to get disease-affected areas 
mask = cv2.inRange(hsv, lower_color, upper_color) 
 
# Apply a morphological operation to improve the mask 
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (7, 7)) 
mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel) 
 
#contour_image = np.zeros_like(image) 
# Find contours in the mask 
contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) 
 
# Draw contours on the original image 
cv2.drawContours(image, contours, -1, (255, 0, 0), 2)  # Draw blue contours around 
disease-affected areas 
 
# Calculate the total leaf area 
total_area = image.shape[0] * image.shape[1] 
#print(total_area) 
# Initialize a variable to store the total affected area 
affected_area = 0 
 
# Iterate over the contours 
for contour in contours: 
    # Calculate the area of each contour 

area = cv2.contourArea(contour) 
 
    x, y, w, h = cv2.boundingRect(contour) 
    length = h 
    width = w 
 
    # Assuming you have the pixel resolution or scale factor in mm/pixel 
    pixel_resolution_mm = 0.1  # Pixel resolution in mm/pixel 
 
    # Calculate the length and width in millimeters 
    length_mm = length * pixel_resolution_mm 
    width_mm = width * pixel_resolution_mm 
 
    # Update the total affected area 
    affected_area += area 
 
   # Calculate the affected area in mm^2 
    affected_area_mm2 = length_mm * width_mm 
 
# Print the length and width of the affected area 
#print("Length:  {} mm".format(length_mm)) 
#print("Width: {} mm" .format(width_mm)) 
 
# Print the affected area 
print("Total affected Area in mm^2 : {} mm^2".format(affected_area_mm2)) 
 
# Print the total affected area 
print("Total affected area in pixels :", affected_area, "pixels") 
 
# Calculate the affected area percentage 
affected_area_percentage = (affected_area / total_area) * 100 
 
# Print the affected area percentage 
print("Total affected area in percentage:", affected_area_percentage, "%") 
 
Disease_Area  = (affected_area_percentage / 100) * total_area 
 
# Display the image with disease-affected areas highlighted 
cv2_imshow(image) 
cv2.waitKey(0) 
cv2.destroyAllWindows()

import cv2 
import numpy as np 
from google.colab.patches import cv2_imshow 
 
# Load the leaf image 
image = cv2.imread('/content/drive/MyDrive/extracted_dataset/Rice Blast/Rice 
blast_17.png') 
 
# Convert the image to HSV color space 
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) 
 
# Defining the lower and upper color thresholds for disease-affected areas 
lower_color = np.array([10, 50, 50])  # Adjusting these values according 
to  specific disease characteristics 
upper_color = np.array([40, 255, 255])  # Adjusting these values according to 
specific disease characteristics 
 
# Threshold the image to get disease-affected areas 
mask = cv2.inRange(hsv, lower_color, upper_color) 
 
# Apply a morphological operation to improve the mask 
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (7, 7)) 
mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel) 
 
#contour_image = np.zeros_like(image) 
# Find contours in the mask 
contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) 
 
# Draw contours on the original image 
cv2.drawContours(image, contours, -1, (255, 0, 0), 2)  # Draw blue contours around 
disease-affected areas 
 
# Calculate the total leaf area 
total_area = image.shape[0] * image.shape[1] 
#print(total_area) 
# Initialize a variable to store the total affected area 
affected_area = 0 
 
# Iterate over the contours 
for contour in contours: 
    # Calculate the area of each contour 
    area = cv2.contourArea(contour) 
 
    x, y, w, h = cv2.boundingRect(contour) 
    length = h 
    width = w 

 # Assuming you have the pixel resolution or scale factor in mm/pixel 
    pixel_resolution_mm = 0.1  # Pixel resolution in mm/pixel 
 
    # Calculate the length and width in millimeters 
    length_mm = length * pixel_resolution_mm 
    width_mm = width * pixel_resolution_mm 
 
    # Update the total affected area 
    affected_area += area 
 
   # Calculate the affected area in mm^2 
    affected_area_mm2 = length_mm * width_mm 
 
# Print the length and width of the affected area 
#print("Length:  {} mm".format(length_mm)) 
#print("Width: {} mm" .format(width_mm)) 
 
# Print the affected area 
print("Total affected Area in mm^2 : {} mm^2".format(affected_area_mm2)) 
 
# Print the total affected area 
print("Total affected area in pixels :", affected_area, "pixels") 
 
# Calculate the affected area percentage 
affected_area_percentage = (affected_area / total_area) * 100 
 
# Print the affected area percentage 
print("Total affected area in percentage:", affected_area_percentage, "%") 
 
Disease_Area  = (affected_area_percentage / 100) * total_area 
 
# Display the image with disease-affected areas highlighted 
cv2_imshow(image) 
cv2.waitKey(0) 
cv2.destroyAllWindows()
